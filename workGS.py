import traceback
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from loguru import logger
from pprint import pprint
import os
from urllib.parse import unquote, urlparse, urlunparse, parse_qs

MAP_COLUMN={
        '–ö–≤–∞—Ä—Ç–∏—Ä–∞':0,
        'üóëÔ∏è  –ì–¥–µ –º—É—Å–æ—Ä–∫–∞':1,
        'üõ°Ô∏è  –ì–¥–µ —Ä–æ—É—Ç–µ—Ä –∏ —â–∏—Ç–æ–∫':2,
        'üè† –ö–∞–∫ –ø–æ–ø–∞—Å—Ç—å –∫ –¥–æ–º—É':3,
        'üéõÔ∏è  –ö–∞–∫ –≤–∫–ª—é—á–∏—Ç—å –ø–ª–∏—Ç—É':4,
        'üì∫ –ö–∞–∫ –≤–∫–ª—é—á–∏—Ç—å –¢–í':5,
        'üî¢  –ì–¥–µ —Å—á–µ—Ç—á–∏–∫–∏':6,
        'üéõÔ∏è  –ö–∞–∫ –≤–∫–ª—é—á–∞—Ç—å –º–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫—É':7,
        'üóí  –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞—Å–µ–ª–µ–Ω–∏—é':8,
        'üóí  –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':9}
VIDEO_EXTENSIONS = {'.mov', '.mp4', '.avi', '.mkv', '.webm'}
class Sheet():

    @logger.catch
    def __init__(self, jsonPath: str, sheetName: str, workSheetName, servisName: str = None, sheetDealUrl: str = None):

        self.scope = ['https://spreadsheets.google.com/feeds',
                      'https://www.googleapis.com/auth/drive']  # —á—Ç–æ —Ç–æ –¥–ª—è —á–µ–≥–æ-—Ç–æ –Ω—É–∂–Ω–æ –ö–æ—Å—Ç—ã–ª—å
        self.creds = ServiceAccountCredentials.from_json_keyfile_name(
            jsonPath, self.scope)  # –°–µ–∫—Ä–µ—Ç—ã–Ω–π —Ñ–∞–π–ª json –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API
        self.client = gspread.authorize(self.creds)
        if sheetDealUrl:
            self.sheet = self.client.open_by_url(sheetDealUrl).worksheet(workSheetName)
        else:
            self.sheet = self.client.open(sheetName).worksheet(
                workSheetName)  # –ò–º—è —Ç–∞–±–ª–∏—Ü—ã
        # self.sheet = self.client.open(workSheetName)  # –ò–º—è —Ç–∞–±–ª–∏—Ü—ã

    def send_cell(self, position: str, value):
        #self.sheet.update_cell(position, value=value)
        self.sheet.update(position, value)

    def update_cell(self, r, c, value):
        self.sheet.update_cell(int(r), int(c), value)
        # sheet.update_cell(1, 1, "I just wrote to a spreadsheet using Python!")0

    def find_cell(self, value):
        cell = self.sheet.find(value)
        return cell
    def get_all_values_row(self, row: str):
        cell = self.sheet.row_values(row)
        return cell
    def get_cell(self, row: str):
        # A1
        cell = self.sheet.acell(row).value
        return cell

    def get_value_in_column(self, column: int):
        # 3
        cell = self.sheet.col_values(column)
        return cell

    def insert_cell(self,data:list):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ –ø–æ—Å–ª–µ–¥–Ω—É—é—é –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É"""
        nextRow = len(self.sheet.get_all_values()) + 1
        self.sheet.insert_row(data,nextRow, value_input_option='USER_ENTERED')
    
    def get_last_clear_row_for_column(self, column: str='–õ–û–ö–ê–¶–ò–Ø'):
        """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –≤ –∫–æ–ª–æ–Ω–∫–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–µ –Ω–æ–º–µ—Ä –∏ –Ω–æ–º–µ—Ä –∫–æ–ª–æ–Ω–∫–∏"""
        colLocation=self.find_cell(column).col
        valuesLocation=self.get_value_in_column(colLocation)
        # pprint(valuesLocation)
        lastClearRowLocation=len(valuesLocation)+1

        
        # location_index = header.index("–õ–û–ö–ê–¶–ò–Ø") + 1  # –ò–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1)

        return lastClearRowLocation, colLocation
    @logger.catch
    def prepare_is_valid_info_room(self, infoRoom: list)->dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict —Å –∫–ª—é—á–∞–º–∏ –∏–∑ MAP_COLUMN –∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏–∑ infoRoom"""
        result={}
        
        for key, value in MAP_COLUMN.items():
            try:
                if infoRoom[value] in ['',None,' ']:
                    continue
                else:
                    result[key]=infoRoom[value]
            except IndexError as e:
                # logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ: {traceback.format_exc()}")
                continue
       
        return result

    
    # 
    def process_url(self,url):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–æ–∫—É–º–µ–Ω—Ç—ã
        if 'docs.yandex.ru/docs/view' in url:
            try:
                parsed_url = urlparse(url)
                query_params = parse_qs(parsed_url.query)
                
                if 'url' in query_params and 'name' in query_params:
                    disk_url = query_params['url'][0]
                    file_name = query_params['name'][0]
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –∏–∑ URL
                    if '–ê–¥—Ä–µ—Å–∞, –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏' in disk_url:
                        return f"/{file_name}"
                        # folder = disk_url.split('–ê–¥—Ä–µ—Å–∞, –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏/')[-1].split('/')[0]
                        # return f"/{folder}/{file_name}"

                    else:
                        # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –¥—Ä—É–≥–æ–π, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                        return f"/{file_name}"
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ø–Ω–¥–µ–∫—Å.–î–æ–∫—É–º–µ–Ω—Ç URL: {e}")
                return None
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ URL
        parsed_url = urlparse(url)
        decoded_path = unquote(parsed_url.path)
        split_path = [p for p in decoded_path.split('/') if p]

        try:
            info_index = split_path.index('–ò–ù–§–û –ü–û –ö–í–ê–†–¢–ò–†–ê–ú')
        except ValueError:
            return None

        if len(split_path) < info_index + 2:
            return None

        parts_after_info = split_path[info_index+1:]
        folder = parts_after_info[0]
        file_path = '/'.join(parts_after_info[1:]) if len(parts_after_info) > 1 else ''

        if not file_path:
            return f"/{folder}"

        dir_name, file_name = os.path.split(file_path)
        name_part, ext_part = os.path.splitext(file_name)
        ext = ext_part.lower()

        if ext in VIDEO_EXTENSIONS:
            new_name = f"{name_part.replace(' ', '_')}_telegram{ext}"
        else:
            new_name = file_name

        new_path = os.path.join(dir_name, new_name) if dir_name else new_name
        return f"/{folder}/{new_path}"

    def update_yandex_links(self,data):
        updated_data = {}
        for key, value in data.items():
            if isinstance(value, str) and ('disk.yandex.ru' in value or 'docs.yandex.ru' in value):
                if ',' in value:
                    values=value.split(',')
                    for value in values:
                        processed = self.process_url(value)
                        try:
                            updated_data[key].append(processed)
                        except:
                            updated_data[key]=[processed]
                else:
                    processed = self.process_url(value)
                    updated_data[key] = processed if processed else value
            else:
                updated_data[key] = value
        return updated_data

    def get_prepare_info_room(self, roomName: str)->dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ"""
        rowRoom=self.find_cell(roomName)
        infoRoom=self.get_all_values_row(rowRoom.row)
        infoRoom=self.prepare_is_valid_info_room(infoRoom)
        infoRoom=self.update_yandex_links(infoRoom)
        return infoRoom

if __name__ == '__main__':
    s=Sheet(jsonPath='beget-test-456816-c17398de9334.json',
            sheetName='BeGuest_–±–∞–∑–∞_–∫–≤–∞—Ä—Ç–∏—Ä'
            ,workSheetName='–õ–∏—Å—Ç1')
    
    
    # infoRoom=s.get_cell('B2')
    # infoRoom=s.get_all_values_row(2)
    # infoRoom=s.find_cell('8 –º–∞—Ä—Ç–∞ 204–¥ - 116 (16 —ç—Ç–∞–∂)')
    # infoRoom=s.get_prepare_info_room('8 –º–∞—Ä—Ç–∞ 204–¥ - 116 (16 —ç—Ç–∞–∂)')
    # infoRoom=s.get_prepare_info_room('–ù–∞–¥–µ–∂–¥–∏–Ω—Å–∫–∞—è 26 -213')
    infoRoom=s.get_prepare_info_room('–ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã –Ω–∞ 8 –º–∞—Ä—Ç–∞ 204–î 16')
    pprint(infoRoom)
    # infoRoom=s.get_all_values_row(rowRoom.row)
    # pprint(infoRoom)
    # infoRoom=s.prepare_is_valid_info_room(infoRoom)
    # pprint(infoRoom)
   

    # # valuesLocation=s.get_value_in_column(colLocation)
    # lastClearRowLocation, colIndex=s.get_last_clear_row_for_column(col)
    # # pprint(valuesLocation)
    # print(lastClearRowLocation)
    # print(colIndex)

    # s.update_cell(lastClearRowLocation, colIndex, 'test')
    # s.update_cell(2, 1, '–ù–æ–≤—ã–π')
    pass