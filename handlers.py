import asyncio
from aiogram import types, F, Router, html, Bot
from aiogram.types import (Message, CallbackQuery,
                           InputFile, FSInputFile,
                            MessageEntity, InputMediaDocument,
                            InputMediaPhoto, InputMediaVideo, Document,
                            ReactionTypeEmoji)
from aiogram.filters import Command, StateFilter,ChatMemberUpdatedFilter
from pprint import pprint
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
import re
from dotenv import load_dotenv
import os
import os.path
import json
from loguru import logger
import requests
from workGS import Sheet
from workKeyboard import get_keyboard, url_mapping
from workBitrix import find_contact_by_phone, find_deal_by_contact_id, is_deal_close, update_deal_status, update_telegram_id, Deal, is_deal_status
from aiogram.fsm.state import State, StatesGroup
from aiogram.dispatcher.middlewares.base import BaseMiddleware
from typing import Dict, Any, Callable, Awaitable
from yadisk_downloader import YandexDiskDownloader
from helper import extract_text_from_docx, convert_heic_to_jpg, send_message_to_manager, send_message_to_manager, send_first_message_to_manager, send_file_message_to_manager
# from dataclasses import dataclass
logger.add("logs/handlers_{time}.log",format="{time} - {level} -{file}:{line} - {message}", rotation="100 MB", retention="10 days", level="DEBUG")
load_dotenv()
TOKEN = os.getenv('TELEGRAM_TOKEN')
SHEET_URL=os.getenv('SHEET_URL')
router = Router()

bot = Bot(token=TOKEN)

s=Sheet(jsonPath='beget-test-456816-c17398de9334.json',
        sheetName='BeGuest_–±–∞–∑–∞_–∫–≤–∞—Ä—Ç–∏—Ä'
        ,workSheetName='–õ–∏—Å—Ç1')

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–Ω–∞—Ç–∞—Ö –ø–æ chat_id
user_rooms = {}



# infoRoom=s.get_prepare_info_room('8 –º–∞—Ä—Ç–∞ 204–¥ - 116 (16 —ç—Ç–∞–∂)')
DOMAIN_BITRIX=os.getenv('DOMAIN_BITRIX')
USER_PHONES={
}


mapping_deal_status={
    'C7:PREPARATION': '–ì–æ—Å—Ç—å –∑–∞–µ—Ö–∞–ª',
    'C7:UC_3EBBY1': '–ó–∞ 15 –º–∏–Ω –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏—Å–ª–∞–ª',
    'C7:PREPAYMENT_INVOICE': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã –∏–∑ –±–æ—Ç–∞ (–µ—Å–ª–∏ –≥–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–∫—Ä–∏–Ω –ø–ª–∞—Ç–µ–∂–∞)',
}

class Form(StatesGroup):
    phone = State()
    apartment = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def is_user_registered(user_id: int) -> bool:
    for phone, data in USER_PHONES.items():
        if data.get('telegram_id') == user_id:
            return True
    return False

# Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class RegistrationMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
        event: Message,
        data: Dict[str, Any]
    ) -> Any:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–ª–ª–±—ç–∫–∏ –∏ –∫–æ–º–∞–Ω–¥—É /start
        if isinstance(event, CallbackQuery) or (
            isinstance(event, Message) and event.text and event.text.startswith('/start')
        ):
            return await handler(event, data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if isinstance(event, Message):
            user_id = event.from_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            state = data.get('state')
            if state:
                current_state = await state.get_state()
                if current_state in [Form.phone.state, Form.apartment.state]:
                    return await handler(event, data)
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            if not await is_user_registered(user_id):
                await event.answer('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.')
                return
        
        return await handler(event, data)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware
router.message.middleware(RegistrationMiddleware())

@router.message(Command('start'))
async def start(message: Message, state: FSMContext):
    await state.set_state(Form.phone)
    message_text=f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞—á–∏–Ω–∞—è —Å 7 –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤), –∫–æ—Ç–æ—Ä—ã–π –≤—ã —É–∫–∞–∑—ã–≤–∞–ª–∏ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏\n–ù–∞–ø—Ä–∏–º–µ—Ä: 79190072351'
    await message.answer(message_text)
    send_first_message_to_manager(message.from_user.id, message_text, str(message.from_user.first_name), str(message.from_user.last_name), str(message.from_user.username))

@router.message(Command('manager'))
async def start(message: Message, state: FSMContext):
    await state.set_state(Form.phone)
    message_text=f'–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ [–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É WhatsApp](https://api.whatsapp.com/send?phone=79300356988)'
    await message.answer(message_text)
    send_first_message_to_manager(message.from_user.id, message_text, str(message.from_user.first_name), str(message.from_user.last_name), str(message.from_user.username))

@router.message(Form.phone)
async def process_phone(message: Message, state: FSMContext):
    global USER_PHONES
    phone = message.text.strip()
    send_message_to_manager(message.from_user.id, f'ü§ñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}')
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not re.match(r'^7\d{10}$', phone):
        message_text='–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å 7 –∏ —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ 11 —Ü–∏—Ñ—Ä.\n–ù–∞–ø—Ä–∏–º–µ—Ä: 79190072351'
        await message.answer(message_text)
        send_message_to_manager(message.from_user.id, message_text)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(phone=phone)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ª–æ–≤–∞—Ä–µ
    if phone not in USER_PHONES:
        # –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –∏—â–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ –ë–∏—Ç—Ä–∏–∫—Å–µ
        contact = await find_contact_by_phone(phone)
        if not contact:
            message_text='–ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.'
            await message.answer(message_text)
            send_message_to_manager(message.from_user.id, message_text)
            return
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–¥–µ–ª–∫—É –ø–æ ID –∫–æ–Ω—Ç–∞–∫—Ç–∞
        deal = await find_deal_by_contact_id(contact[0]['ID'])
        if not deal:
            message_text='–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.'
            await message.answer(message_text)
            send_message_to_manager(message.from_user.id, message_text)
            return
        logger.debug(f'deal: {deal}')
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ª–æ–≤–∞—Ä—å
        USER_PHONES[phone] = {
            'telegram_id': message.from_user.id,
            'deal_id': deal[0]['ID'],
            'status': deal[0]['STAGE_ID'],
            'room_name':deal[0][Deal.room_name] # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã
             
        }
        # message_text=f'–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ, –≤–∞–º –æ—Å—Ç–∞–ª–æ—Å—å –æ–ø–ª–∞—Ç–∏—Ç—å {deal[0][Deal.ostatoc_payment]} —Ä—É–±–ª–µ–π.\n\n–ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω –ø–ª–∞—Ç–µ–∂–∞'
#         message_text=f"""–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. 

# –û—Å—Ç–∞—Ç–æ–∫ –æ–ø–ª–∞—Ç—ã –∑–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ {deal[0][Deal.ostatoc_payment]} —Ä—É–±–ª–µ–π.
# –û–ø–ª–∞—Ç–∏—Ç—å –º–æ–∂–µ—Ç–µ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º:
# 2202208183735308 –°–±–µ—Ä–±–∞–Ω–∫
# –ê–Ω–∞—Å—Ç–∞—Å–∏—è –ê–Ω–¥—Ä–µ–µ–≤–Ω–∞ –ß.

# –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–ª–∞—Ç–µ–∂–∞.

# –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∑–∞—Å–µ–ª–µ–Ω–∏—é –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /info"""
        message_text=f"""–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. 

–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∑–∞—Å–µ–ª–µ–Ω–∏—é –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /info"""
        await bot.send_message(chat_id=message.from_user.id,
                               text=message_text)
        apartments=USER_PHONES[phone]['room_name']
        deal_link=f'https://{DOMAIN_BITRIX}/crm/deal/details/{deal[0]['ID']}/'
        # additional_info=
        
        
        
        chat_room_id=send_message_to_manager(message.from_user.id, message_text, apartments=apartments, deal_link=deal_link)
        try:
            chat_room_id=chat_room_id['data']['chat_id']
        except:
            chat_room_id='None'
        await update_telegram_id(dealID=deal[0]['ID'],telegram_id=message.from_user.id, chat_room_id=chat_room_id)
    else:
        contact = await find_contact_by_phone(phone)
        if not contact:
            message_text='–ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.'
            await message.answer(message_text)
            send_message_to_manager(message.from_user.id, message_text)
            return
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–¥–µ–ª–∫—É –ø–æ ID –∫–æ–Ω—Ç–∞–∫—Ç–∞
        deal = await find_deal_by_contact_id(contact[0]['ID'])
        if not deal:
            message_text='–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.'
            await message.answer(message_text)
            send_message_to_manager(message.from_user.id, message_text)
            return
        logger.debug(f'deal: {deal}')
        USER_PHONES[phone]['deal_id']=deal[0]['ID']
        USER_PHONES[phone]['status']=deal[0]['STAGE_ID']
        USER_PHONES[phone]['room_name']=deal[0][Deal.room_name]
        
        #telegram_id –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ—Ç –∂–µ
        message_text=f'–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.–í–∞—à–∏ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã: {USER_PHONES[phone]['room_name']}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /info –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ.'
        await message.answer(message_text)
        send_message_to_manager(message.from_user.id, message_text)
        

        
    await state.set_state(Form.apartment)
        
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –Ω–∞–∑–≤–∞–Ω–∏—è –∫–≤–∞—Ä—Ç–∏—Ä—ã
    # await state.set_state(Form.apartment)
    # await message.answer(f'–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä –≤ —Ç–∞–±–ª–∏—Ü–µ {SHEET_URL}')




@router.message(Command('info'))
async def get_info_room(message: Message, state: FSMContext):
    phone=await state.get_data()
    phone=phone['phone']

    send_message_to_manager(message.from_user.id, 'ü§ñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ /info')
    # if not await is_deal_status(dealID=USER_PHONES[phone]['deal_id'],status=Deal.Status.prozivaet):
    #     message_text='–í–∞—à –ø–ª–∞—Ç–µ–∂ –ø–æ–∫–∞ –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /info'
    #     await message.answer(message_text)
    #     send_message_to_manager(message.from_user.id, message_text)
    #     return
    if not await is_deal_status(dealID=USER_PHONES[phone]['deal_id'],status=Deal.Status.prozivaet):
        infoRoom = s.get_prepare_info_room(USER_PHONES[phone]['room_name'])
        logger.info(f'infoRoom: {infoRoom}')
        #–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª—é—á–∏ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞—Å–µ–ª–µ–Ω–∏—é –∏ –ö–∞–∫ –ø–æ–ø–∞—Å—Ç—å –∫ –¥–æ–º—É
        if not await is_deal_close(dealID=USER_PHONES[phone]['deal_id']):
            try:
                infoRoom = {
                'üóí –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞—Å–µ–ª–µ–Ω–∏—é': infoRoom['üóí  –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞—Å–µ–ª–µ–Ω–∏—é'],
                'üè† –ö–∞–∫ –ø–æ–ø–∞—Å—Ç—å –∫ –¥–æ–º—É': infoRoom['üè† –ö–∞–∫ –ø–æ–ø–∞—Å—Ç—å –∫ –¥–æ–º—É']
                }
            except:
                infoRoom = {
                'üóí –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞—Å–µ–ª–µ–Ω–∏—é': infoRoom['üóí  –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞—Å–µ–ª–µ–Ω–∏—é']
                # 'üè† –ö–∞–∫ –ø–æ–ø–∞—Å—Ç—å –∫ –¥–æ–º—É': infoRoom['üè† –ö–∞–∫ –ø–æ–ø–∞—Å—Ç—å –∫ –¥–æ–º—É']
                }
            keyboard = get_keyboard(infoRoom)
            message_text="""–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞—Å–µ–ª–µ–Ω–∏—é
    –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –≤–∞–º –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—é"""
            await message.answer(message_text, reply_markup=keyboard)
            send_message_to_manager(message.from_user.id, message_text)
            send_message_to_manager(message.from_user.id, infoRoom)
            # message_text='–í–∞—à –ø–ª–∞—Ç–µ–∂ –ø–æ–∫–∞ –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /info'
            # await message.answer(message_text)
            # send_message_to_manager(message.from_user.id, message_text)
            return
        else:
            message_text='–í–∞—à –¥–æ–≥–æ–≤–æ—Ä –∑–∞–∫—Ä—ã—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.'
            await message.answer(message_text)
            send_message_to_manager(message.from_user.id, message_text)
            return


    infoRoom = s.get_prepare_info_room(USER_PHONES[phone]['room_name'])
    logger.info(f'infoRoom: {infoRoom}')



    keyboard = get_keyboard(infoRoom)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–Ω–∞—Ç–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_rooms[message.from_user.id] = infoRoom
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    # await state.clear()
    message_text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ'
    await message.answer(message_text, reply_markup=keyboard)

    send_message_to_manager(message.from_user.id, message_text)
    send_message_to_manager(message.from_user.id, keyboard.to_json())
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–æ–≤ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
@router.message(F.photo | F.document)
async def process_file(message: Message):
    user_id = message.from_user.id
    
    # –ù–∞—Ö–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ –µ–≥–æ ID
    phone = None
    for p, data in USER_PHONES.items():
        if data['telegram_id'] == user_id:
            phone = p
            break
    
    if not phone:
        message_text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start'
        await message.answer(message_text)
        send_message_to_manager(message.from_user.id, message_text)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏
    deal_id = USER_PHONES[phone]['deal_id']
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ –ø–∞–ø–∫—É photos
    # pprint(message)
    # filePath = f'files/{phone}.{message.photo[-1].file_extension}'
    if message.photo:
        file_info = await bot.get_file(message.photo[-1].file_id)
        pprint(file_info)
        fileID=message.photo[-1].file_id
        file_extension = file_info.file_path.split('.')[-1]
        # await message.photo[-1].download(filePath)
    elif message.document:
        file_info = await bot.get_file(message.document.file_id)
        pprint(file_info)
        fileID=message.document.file_id
        file_extension = file_info.file_path.split('.')[-1]

    filePath = f'files/{phone}.{file_extension}'
    await bot.download(fileID,filePath)

    await update_deal_status(deal_id, Deal.Status.check_payment,filePath)

    #–∫–æ–¥–∏—Ä—É–µ–º —Ñ–∞–π–ª base64
    import base64
    with open(filePath, 'rb') as file:
        data = file.read()
    data = base64.b64encode(data).decode('utf-8')
    name_file=filePath.split('/')[-1]
    send_file_message_to_manager(message.from_user.id, name_file, data)
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Å–ª–æ–≤–∞—Ä–µ
    USER_PHONES[phone]['status'] = Deal.Status.check_payment
    message_text='–°–ø–∞—Å–∏–±–æ! –í–∞—à –ø–ª–∞—Ç–µ–∂ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—é.'
    await message.answer(message_text)
    send_message_to_manager(message.from_user.id, message_text)
    send_message_to_manager(message.from_user.id, 'ü§ñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–∞–π–ª, –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –≤—ã –º–æ–∂–µ—Ç–µ –≤ —Å–¥–µ–ª–∫–µ')

@router.callback_query(F.data.startswith("show_"))
async def show_submenu(callback: CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –∏–∑ –∫–æ–ª–±—ç–∫–∞
    # logger.info(f'callback: {callback}')
    key = callback.data.replace("show_", "")
    # logger.info(f'–ü–æ–ª—É—á–µ–Ω –∫–ª—é—á: {key}')
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–Ω–∞—Ç–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = user_rooms.get(callback.from_user.id)
    if not user_data:
        message_text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ'
        await callback.answer(message_text)
        send_message_to_manager(callback.from_user.id, message_text)
        return
    
    # logger.info(f'–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_data}')
    # logger.info(f'–î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª—é—á–∞ {key}: {user_data.get(key)}')
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
    keyboard = get_keyboard(user_data, filter_key=key)
    send_message_to_manager(callback.from_user.id, keyboard.to_json())
    await callback.message.edit_reply_markup(reply_markup=keyboard)

    await callback.answer()

@router.callback_query(F.data == "back")
async def back_to_main(callback: CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–Ω–∞—Ç–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # logger.info(f'callback: {callback}')
    user_data = user_rooms.get(callback.from_user.id)
    if not user_data:
        message_text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ'
        await callback.answer(message_text)
        send_message_to_manager(callback.from_user.id, message_text)
        return
    
    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = get_keyboard(user_data)
    
    await callback.message.edit_reply_markup(reply_markup=keyboard)
    send_message_to_manager(callback.from_user.id, keyboard.to_json())
    await callback.answer()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è file_id –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
# –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {"–ª–æ–∫–∞–ª—å–Ω—ã–π_–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É": "file_id"}
file_id_cache = {}
FILE_CACHE_PATH = "file_id_cache.json"

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–µ—à file_id, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
def load_file_id_cache():
    global file_id_cache
    try:
        if os.path.exists(FILE_CACHE_PATH):
            with open(FILE_CACHE_PATH, 'r', encoding='utf-8') as f:
                file_id_cache = json.load(f)
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(file_id_cache)} –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫–µ—à–∞ file_id")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–µ—à–∞ file_id: {e}")
        file_id_cache = {}

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–µ—à file_id –Ω–∞ –¥–∏—Å–∫
def save_file_id_cache():
    try:
        with open(FILE_CACHE_PATH, 'w', encoding='utf-8') as f:
            json.dump(file_id_cache, f, ensure_ascii=False)
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(file_id_cache)} –∑–∞–ø–∏—Å–µ–π –≤ –∫–µ—à file_id")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–µ—à–∞ file_id: {e}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–µ—à –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
load_file_id_cache()

@router.callback_query(F.data.startswith("download_"))
async def download_and_send_file(callback: CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ –∫–æ–ª–±—ç–∫–∞
    url_id = callback.data.replace("download_", "")
    logger.info(f'–ü–æ–ª—É—á–µ–Ω ID –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {url_id}')
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π URL –∏–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    file_path = url_mapping.get(url_id)
    if not file_path:
        logger.error(f'–ù–µ –Ω–∞–π–¥–µ–Ω –ø—É—Ç—å –¥–ª—è ID: {url_id}')
        message_text='–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. –ò–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ /start'
        await callback.message.answer(message_text)
        send_message_to_manager(callback.from_user.id, message_text)
        await callback.answer()
        return
    
    logger.info(f'–ù–∞–π–¥–µ–Ω –ø—É—Ç—å: {file_path}')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º
    is_relative_path = file_path.startswith('/') and '://' not in file_path
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –ø—É—Ç–∏
    file_name = os.path.basename(file_path)
    file_name_without_ext = os.path.splitext(file_name)[0]
    file_ext = os.path.splitext(file_name)[1]
    file_caption = file_name_without_ext.replace('_telegram','').replace('_', ' ')
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    video_formats = ['.mov', '.mp4', '.avi', '.mkv', '.MOV', '.MP4', '.AVI', '.MKV']
    image_formats = ['.jpg', '.jpeg', '.png', '.heic', '.gif', '.JPG', '.JPEG', '.PNG', '.HEIC', '.GIF']
    doc_formats = ['.pdf', '.doc', '.docx', '.xls', '.xlsx', '.ppt', '.pptx', '.txt']
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    file_type = 'document'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ñ–∞–π–ª —Å—á–∏—Ç–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
    if any(file_ext.lower() == ext for ext in video_formats):
        file_type = 'video'
    elif any(file_ext.lower() == ext for ext in image_formats):
        file_type = 'photo'
    
    # –ï—Å–ª–∏ –≤–∏–¥–µ–æ, –¥–æ–±–∞–≤–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å _telegram
    if file_type == 'video' and '_telegram' not in file_name:
        telegram_file_name = f"{file_name_without_ext.replace(' ', '_')}_telegram{file_ext}"
    else:
        telegram_file_name = file_name.replace(' ', '_')
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–∞–ø–∫–∏ (–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã)
    if is_relative_path:
        # –î–ª—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏ –ø–∞–ø–∫–∞ - —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç –ø—É—Ç–∏
        path_segments = file_path.strip('/').split('/')
        folder_name = path_segments[0] if len(path_segments) > 1 else "unknown"
    else:
        # –î–ª—è –ø–æ–ª–Ω–æ–≥–æ URL –∏–∑–≤–ª–µ–∫–∞–µ–º –ø–∞–ø–∫—É –∏–∑ –ø—É—Ç–∏
        parts = file_path.split('/')
        folder_idx = max([i for i, part in enumerate(parts) if '–ö–í–ê–†–¢–ò–†–ê–ú' in part], default=-1)
        if folder_idx != -1 and len(parts) > folder_idx + 1:
            folder_name = parts[folder_idx + 1]
        else:
            folder_name = "unknown"
    
    # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    folder_name = folder_name.replace('%20', ' ')
    os.makedirs(os.path.join("videos", folder_name), exist_ok=True)
    local_file_path = os.path.join("videos", folder_name, telegram_file_name)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª –≤ –∫–µ—à–µ –ø–æ file_id
    if local_file_path in file_id_cache:
        cached_file_id = file_id_cache[local_file_path]
        logger.info(f"–ù–∞–π–¥–µ–Ω –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π file_id: {cached_file_id} –¥–ª—è {local_file_path}")
        send_message_to_manager(callback.from_user.id, f'ü§ñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª —Ñ–∞–π–ª {file_caption}')
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ –µ–≥–æ file_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            await callback.message.answer("–û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...")
            
            if file_type == 'video':
                await bot.send_video(
                    chat_id=callback.from_user.id,
                    video=cached_file_id,
                    caption=file_caption,
                    width=1080,
                    height=1920,
                )
            elif file_type == 'photo':
                await bot.send_photo(
                    chat_id=callback.from_user.id,
                    photo=cached_file_id,
                    caption=file_caption
                )
            else:  # document
                text=extract_text_from_docx(local_file_path)
                print(text)
                await bot.send_message(
                    chat_id=callback.from_user.id,
                    text=text
                )
                # await bot.send_document(
                #     chat_id=callback.from_user.id,
                #     document=cached_file_id,
                #     caption=file_caption
                # )
                
            await callback.answer()
            return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}, —É–¥–∞–ª—è–µ–º –∏–∑ –∫–µ—à–∞ –∏ —Å–∫–∞—á–∏–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ")
            # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ file_id, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –∫–µ—à–∞ –∏ —Å–∫–∞—á–∏–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ
            del file_id_cache[local_file_path]
            save_file_id_cache()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ
    if not os.path.isfile(local_file_path):
        await callback.message.answer(f"–°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª {file_caption}...")
        send_message_to_manager(callback.from_user.id, f'ü§ñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª —Ñ–∞–π–ª {file_caption}')
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞—É–Ω–ª–æ–∞–¥–µ—Ä –Ø–Ω–¥–µ–∫—Å –î–∏—Å–∫–∞
            downloader = YandexDiskDownloader()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–∞ –Ø–Ω–¥–µ–∫—Å –î–∏—Å–∫–µ
            if '.docx' in file_path:
                yadisk_path = f'disk:/‚úÖ–ò–ù–°–¢–†–£–ö–¶–ò–ò –∏ –ò–ù–§–û –ø–æ –∫—Ä–≤–∞—Ä—Ç–∏—Ä–∞–º/–ê–¥—Ä–µ—Å–∞, –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏{file_path}'
            elif is_relative_path:
                # –ï—Å–ª–∏ –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –∫–∞—Ç–∞–ª–æ–≥
                yadisk_path = f"disk:/‚úÖ–ò–ù–°–¢–†–£–ö–¶–ò–ò –∏ –ò–ù–§–û –ø–æ –∫—Ä–≤–∞—Ä—Ç–∏—Ä–∞–º/–ò–ù–§–û –ü–û –ö–í–ê–†–¢–ò–†–ê–ú{file_path}"
            else:
                # –ï—Å–ª–∏ –ø–æ–ª–Ω—ã–π URL, –∏–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å
                if "–ò–ù–§–û%20–ü–û%20–ö–í–ê–†–¢–ò–†–ê–ú" in file_path or "–ò–ù–§–û –ü–û –ö–í–ê–†–¢–ò–†–ê–ú" in file_path:
                    # –ü—É—Ç—å —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ò–ù–§–û –ü–û –ö–í–ê–†–¢–ò–†–ê–ú
                    yadisk_path = f"disk:/‚úÖ–ò–ù–°–¢–†–£–ö–¶–ò–ò –∏ –ò–ù–§–û –ø–æ –∫—Ä–≤–∞—Ä—Ç–∏—Ä–∞–º{file_path.split('–ò–ù–§–û –ü–û –ö–í–ê–†–¢–ò–†–ê–ú')[-1]}"
                elif '–ê–¥—Ä–µ—Å–∞, –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏' in file_path:
                    file_path = file_path.replace('–ê–¥—Ä–µ—Å–∞, –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏', '')
                    yadisk_path = f'disk:/‚úÖ–ò–ù–°–¢–†–£–ö–¶–ò–ò –∏ –ò–ù–§–û –ø–æ –∫—Ä–≤–∞—Ä—Ç–∏—Ä–∞–º/–ê–¥—Ä–µ—Å–∞, –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏/{file_path}' 
                    print(yadisk_path)
                else:
                    # –î—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç –ø—É—Ç–∏
                    yadisk_path = file_path
                        


            logger.info(f'–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ: {yadisk_path}')
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            success = await downloader.download_file_async(yadisk_path, local_file_path)
            
                # file_path=
            if not success:
                message_text='–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
                await callback.message.answer(message_text)
                send_message_to_manager(callback.from_user.id, message_text)
                await callback.answer()
                return
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            message_text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
            await callback.message.answer(message_text)
            send_message_to_manager(callback.from_user.id, message_text)
            await callback.answer()
            return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        if '.heic' in file_path:
            local_file_path = convert_heic_to_jpg(local_file_path)
        file = FSInputFile(local_file_path)
        sent_message = None
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Ç–∏–ø–∞
        if file_type == 'video':
            sent_message = await bot.send_video(
                chat_id=callback.from_user.id,
                video=file,
                caption=file_caption,
                width=1080,
                height=1920,
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –≤–∏–¥–µ–æ
            if sent_message and sent_message.video:
                file_id = sent_message.video.file_id
                logger.info(f"–ü–æ–ª—É—á–µ–Ω file_id –≤–∏–¥–µ–æ: {file_id} –¥–ª—è {local_file_path}")
                file_id_cache[local_file_path] = file_id
        
        elif file_type == 'photo':
            sent_message = await bot.send_photo(
                chat_id=callback.from_user.id,
                photo=file,
                caption=file_caption
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id —Ñ–æ—Ç–æ
            if sent_message and sent_message.photo:
                file_id = sent_message.photo[-1].file_id  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ (—Å–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ) —Ñ–æ—Ç–æ
                logger.info(f"–ü–æ–ª—É—á–µ–Ω file_id —Ñ–æ—Ç–æ: {file_id} –¥–ª—è {local_file_path}")
                file_id_cache[local_file_path] = file_id
        
        else:  # document

            text=extract_text_from_docx(local_file_path)
            print(text)
            await bot.send_message(
                chat_id=callback.from_user.id,
                text=text
            )
            # sent_message = await bot.send_document(
            #     chat_id=callback.from_user.id,
            #     document=file.path,
            #     caption=file_caption
            # )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –¥–æ–∫—É–º–µ–Ω—Ç–∞
            if sent_message and sent_message.document:
                file_id = sent_message.document.file_id
                logger.info(f"–ü–æ–ª—É—á–µ–Ω file_id –¥–æ–∫—É–º–µ–Ω—Ç–∞: {file_id} –¥–ª—è {local_file_path}")
                file_id_cache[local_file_path] = file_id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–µ—à file_id
        save_file_id_cache()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
        message_text='–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª. –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É'
        await callback.message.answer(message_text)
        send_message_to_manager(callback.from_user.id, message_text)
    
    await callback.answer()

#–æ–±—Ä–æ–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
@router.message()
async def handle_text_message(message: types.Message):
    text='–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Ä–µ—à–∏—Ç—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –¥–ª—è —Å–≤—è–∑–∏ –≤—ã –º–æ–∂–µ—Ç–µ:\n\n- –ü–æ–∑–≤–æ–Ω–∏—Ç—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: +79300356988\n- [–ù–∞–ø–∏—Å–∞—Ç—å –≤ WhatsApp](https://api.whatsapp.com/send?phone=79300356988)'
    await message.answer(text)
    send_message_to_manager(message.from_user.id, text)

    send_message_to_manager(message.from_user.id, f'{message.text}')


