from aiogram.utils.keyboard import InlineKeyboardBuilder
from loguru import logger
from helper import get_path_to_file_info, get_path_to_file_instruction, extract_filenames
import os
import hashlib

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –º–µ–∂–¥—É ID –∏ –ø–æ–ª–Ω—ã–º URL
url_mapping = {}
# –ë–∞–∑–æ–≤—ã–π URL –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞
YANDEX_BASE_URL = "https://disk.yandex.ru/d/GdBBbAgu5NFSFQ/–ò–ù–§–û%20–ü–û%20–ö–í–ê–†–¢–ò–†–ê–ú"

def get_url_id(url):
    """
    –°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π ID –¥–ª—è URL
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–∞—Å—Ç—å —Ö–µ—à–∞ –æ—Ç URL –∫–∞–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    url_hash = hashlib.md5(url.encode()).hexdigest()[:10]
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ ID –∏ URL
    url_mapping[url_hash] = url
    return url_hash

@logger.catch
def get_keyboard(items: dict, filter_key=None):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ª–æ–≤–∞—Ä—è
    –ï—Å–ª–∏ filter_key —É–∫–∞–∑–∞–Ω, —Å–æ–∑–¥–∞—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª—é—á–∞
    """
    
    builder = InlineKeyboardBuilder()
    
    # –í–∏–¥–µ–æ—Ñ–æ—Ä–º–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ–º —Å–∫–∞—á–∏–≤–∞—Ç—å
    video_formats = ['.mov', '.mp4', '.avi', '.mkv', '.MOV', '.MP4', '.AVI', '.MKV']
    # –§–æ—Ä–º–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö —Ç–æ–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
    image_formats = ['.jpg', '.jpeg', '.png', '.heic', '.JPG', '.JPEG', '.PNG', '.HEIC']

    docs_formats = ['.docx', '.doc', '.xlsx', '.xls', '.XLSX', '.XLS']
    
    if filter_key:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
        logger.info(f'–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–º–µ–Ω—é –¥–ª—è –∫–ª—é—á–∞: {filter_key}')
        values = items.get(filter_key, [])
        logger.info(f'–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {values}')
        
        if filter_key == '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞—Å–µ–ª–µ–Ω–∏—é':
            values = get_path_to_file_instruction(values, returnIsUrl=True)
        else:
            values = get_path_to_file_info(values, returnIsUrl=True)
        
        logger.info(f'–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {values}')
        
        if isinstance(values, list) and len(values) > 0:
            for i, value in enumerate(values):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º –ø—É—Ç–µ–º
                if value.startswith('/') and '://' not in value:
                    # –î–ª—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                    file_name = os.path.basename(value)
                    nameFile = os.path.splitext(file_name)[0]
                else:
                    # –î–ª—è –ø–æ–ª–Ω—ã—Ö URL –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
                    nameFile = extract_filenames([value])[0]
                
                if len(nameFile) > 30:
                    nameFile = nameFile[:30] + '...'
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                file_ext = os.path.splitext(value)[1].lower()
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ download_
                if any(ext.lower() == file_ext for ext in video_formats + image_formats + docs_formats):
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å, –¥–∞–∂–µ –µ—Å–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π
                    url_id = get_url_id(value)
                    builder.button(text=f"üìé {nameFile}", callback_data=f"download_{url_id}")
                else:
                    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                    if value.startswith('/') and '://' not in value:
                        # –ï—Å–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π URL
                        full_url = f"{YANDEX_BASE_URL}{value}"
                        builder.button(text=f"{nameFile}", url=full_url)
                    else:
                        # –î–ª—è –ø–æ–ª–Ω—ã—Ö URL –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                        builder.button(text=f"{nameFile}", url=value)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            builder.button(text="‚Üê –ù–∞–∑–∞–¥", callback_data=f"back")
        elif isinstance(values, str):
            # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
            file_ext = os.path.splitext(values)[1].lower()
            if any(ext.lower() == file_ext for ext in video_formats + image_formats + docs_formats):
                # –î–ª—è –≤–∏–¥–µ–æ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º download_
                url_id = get_url_id(values)
                builder.button(text=f"üìé {filter_key}", callback_data=f"download_{url_id}")
            else:
                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                if values.startswith('/') and '://' not in values:
                    # –ï—Å–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π URL
                    full_url = f"{YANDEX_BASE_URL}{values}"
                    builder.button(text=filter_key, url=full_url)
                else:
                    # –î–ª—è –ø–æ–ª–Ω—ã—Ö URL –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    builder.button(text=filter_key, url=values)
            builder.button(text="‚Üê –ù–∞–∑–∞–¥", callback_data=f"back")
        builder.adjust(1)
        return builder.as_markup()
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    for key, value in items.items():
        if key == '–ö–≤–∞—Ä—Ç–∏—Ä–∞' or value is None:
            continue

        if key == '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞—Å–µ–ª–µ–Ω–∏—é':
            processed_value = get_path_to_file_instruction(value, returnIsUrl=True)
        else:
            
            processed_value = get_path_to_file_info(value, returnIsUrl=True)
        
        if len(key) > 30:
            key = key[:30] + '...'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø processed_value
        if isinstance(processed_value, list):
            if len(processed_value) > 1:
                # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π, —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –∫–æ–ª–±—ç–∫–æ–º
                builder.button(text=f"{key} ({len(processed_value)})", callback_data=f"show_{key}")
            elif len(processed_value) == 1:
                # –ï—Å–ª–∏ –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
                file_ext = os.path.splitext(processed_value[0])[1].lower()
                if any(ext.lower() == file_ext for ext in video_formats + image_formats + docs_formats):
                    # –î–ª—è –≤–∏–¥–µ–æ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º download_
                    url_id = get_url_id(processed_value[0])
                    builder.button(text=f"üìé {key}", callback_data=f"download_{url_id}")
                else:
                    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                    if processed_value[0].startswith('/') and '://' not in processed_value[0]:
                        # –ï—Å–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π URL
                        full_url = f"{YANDEX_BASE_URL}{processed_value[0]}"
                        builder.button(text=key, url=full_url)
                    else:
                        # –î–ª—è –ø–æ–ª–Ω—ã—Ö URL –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                        builder.button(text=key, url=processed_value[0])
        elif processed_value:
            # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
            file_ext = os.path.splitext(processed_value)[1].lower()
            if any(ext.lower() == file_ext for ext in video_formats + image_formats + docs_formats):
                # –î–ª—è –≤–∏–¥–µ–æ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º download_
                url_id = get_url_id(processed_value)
                builder.button(text=f"üìé {key}", callback_data=f"download_{url_id}")
            else:
                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                if processed_value.startswith('/') and '://' not in processed_value:
                    # –ï—Å–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π URL
                    full_url = f"{YANDEX_BASE_URL}{processed_value}"
                    builder.button(text=key, url=full_url)
                else:
                    # –î–ª—è –ø–æ–ª–Ω—ã—Ö URL –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    builder.button(text=key, url=processed_value)
    
    builder.adjust(1)
    return builder.as_markup()
